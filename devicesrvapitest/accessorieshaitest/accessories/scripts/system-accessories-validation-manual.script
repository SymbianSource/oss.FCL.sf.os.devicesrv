//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//
//! @file
//! @SYMTestSuiteName system-accessories-validation-manual
//! @SYMScriptTestEnvironment This test script requires a basic ROM.
//
// Tests all public elements of the RAccessoryServer, RAccessoryConnection
// classes as a means of confidence that the APIs work as expected.
// 
// The purpose is to provide a regression test suite of PublishedAll
// APIs for: RAccessoryServer, RAccessoryConnection
// The tests are manual. Before testing, you need to connect target device with external equipment, such as headset and carkit.
//



LOAD_SUITE t_accessories





START_TESTCASE SYSTEM-ACCESSORIES-VALIDATION-MANUAL-0001

//!@SYMTestCaseID		SYSTEM-ACCESSORIES-VALIDATION-MANUAL-0001
//!@SYMAPI
//!                TInt RAccessoryServer::Connect();
//!                Tint RAccessoryServer::Disconnect();
//!                TInt RAccessoryConnection::CreateSubSession( RAccessoryServer{ref} aSession );
//!                TInt RAccessoryConnection::CloseSubSession( );
//!                TInt RAccessoryConnection :: GetAccessoryConnectionStatus( TAccPolGenericIDArray{ref} aGenericIdArray ) const;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		4/21/2008 
//!@SYMTestCaseDesc		Verify Status for Connected Headset
//!@SYMTestActions
//!                1. ConnectToAccessoryServer
//!                2. CreateAccessorySubSession(RAccessoryServer = accesoryserver1)
//!                3. GetAccessoryConnectionStatus
//!                4. VerifyDeviceTypeCaps (DeviceTypeCap = 1)
//!                5. CloseAccessorySubSession
//!                6. CloseAccessoryServer
//!@SYMTestStatus		Veriied with bugs
//!@SYMTestPriority		normal
//!@SYMTestExpectedResults
//!                Connection with accessory server and creation of a subsession must return KErrNone.Log must print wheter if headset is connected or not
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_accessories	\systemTest\accessories\system-accessories-validation-manual.ini
		CREATE_OBJECT	RAccessoryConnection		accessoryconnection1
		CREATE_OBJECT	RAccessoryServer		accesoryserver1
		COMMAND		accesoryserver1		Connect
		COMMAND		accessoryconnection1		CreateSubSession			SYSTEM-Accessories-0001-0001-CreateSubSession_command02
		COMMAND		accessoryconnection1		GetAccessoryConnectionStatus
		COMMAND		accessoryconnection1		VerifyDeviceTypeCaps			SYSTEM-Accessories-0001-0001-VerifyDeviceTypeCaps_command04
		COMMAND		accessoryconnection1		CloseSubSession
		COMMAND		accesoryserver1		Disconnect
	END_TEST_BLOCK
END_TESTCASE SYSTEM-ACCESSORIES-VALIDATION-MANUAL-0001




START_TESTCASE SYSTEM-ACCESSORIES-VALIDATION-MANUAL-0002

//!@SYMTestCaseID		SYSTEM-ACCESSORIES-VALIDATION-MANUAL-0002
//!@SYMAPI
//!                TInt RAccessoryServer::Connect();
//!                Tint RAccessoryServer::Disconnect();
//!                TInt RAccessoryConnection::CreateSubSession( RAccessoryServer{ref} aSession );
//!                TInt RAccessoryConnection::CloseSubSession( );
//!                TInt RAccessoryConnection :: GetAccessoryConnectionStatus( TAccPolGenericIDArray{ref} aGenericIdArray ) const;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		4/21/2008 
//!@SYMTestCaseDesc		Verify Status for Connected Carkit
//!@SYMTestActions
//!                1. ConnectToAccessoryServer
//!                2. CreateAccessorySubSession(RAccessoryServer = accesoryserver1)
//!                3. GetAccessoryConnectionStatus
//!                4. VerifyDeviceTypeCaps (DeviceTypeCap = 2)
//!                5. CloseAccessorySubSession
//!                6. CloseAccessoryServer
//!@SYMTestStatus		Verified
//!@SYMTestPriority		normal
//!@SYMTestExpectedResults
//!                Connection with accessory server and creation of a subsession must return KErrNone. Log must print wheter if Carkit is connected or not
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_accessories	\systemTest\accessories\system-accessories-validation-manual.ini
		CREATE_OBJECT	RAccessoryConnection		accessoryconnection1
		CREATE_OBJECT	RAccessoryServer		accesoryserver1
		COMMAND		accesoryserver1		Connect
		COMMAND		accessoryconnection1		CreateSubSession			SYSTEM-Accessories-0002-0001-CreateSubSession_command02
		COMMAND		accessoryconnection1		GetAccessoryConnectionStatus
		COMMAND		accessoryconnection1		VerifyDeviceTypeCaps			SYSTEM-Accessories-0002-0001-VerifyDeviceTypeCaps_command04
		COMMAND		accessoryconnection1		CloseSubSession
		COMMAND		accesoryserver1		Disconnect
	END_TEST_BLOCK
END_TESTCASE SYSTEM-ACCESSORIES-VALIDATION-MANUAL-0002

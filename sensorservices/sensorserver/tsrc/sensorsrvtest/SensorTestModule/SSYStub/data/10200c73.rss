/*
* Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies). 
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  Resource definitions for project SSYstup
*
*/


#include <ecom/registryinfov2.rh>
#include <sensrvresource.hrh>


#define KSSYSTUBIMPLEMENTATIONUID 0x10200c73

// Declares info for two implementations
RESOURCE REGISTRY_INFO SSYStub
    {
    // UID for the DLL. See xxx.mmp
    resource_format_version = RESOURCE_FORMAT_VERSION_2;
    dll_uid = KSSYSTUBIMPLEMENTATIONUID;
    interfaces = 
        {
        INTERFACE_INFO
            {
            // UID of interface that is implemented
            interface_uid = KSsyControlInterfaceUid;
            implementations = 
                {
                BINARY_IMPLEMENTATION_INFO
                    {
                    implementation_uid = 0x10200c73; //KSSYSTUBIMPLEMENTATIONUID;
                    version_no         = 1;
                    display_name       = "EventSsyStub";
                    default_data       = {
                                         // Event test channel0
                                         0x1, // ChannelInfoVersion
                                         0x2E, //  ChannelInfoLength
                                         0xE, // Flags
                                         0xed, 0xef, 0xfa, 0x1e, // ChannelType
                                         0x02, 0x00, 0x00, 0x00, // ContextType
                                         0xed, 0xef, 0xfa, 0x1e, // Quantity
                                         0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, // Location: Event0
                                         0x0B, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, // VendorId: VendorEvent
                                         0x05, 0x00, 0x00, 0x00, // ChannelDataTypeId
                                         0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // ChannelSecurityPolicy

                                         // Event test channel1
                                         0x1, // ChannelInfoVersion
                                         0x2E, //  ChannelInfoLength
                                         0xE, // Flags
                                         0xed, 0xef, 0xfa, 0x1e, // ChannelType 0x1efaefed
                                         0x02, 0x00, 0x00, 0x00, // ContextType
                                         0xed, 0xef, 0xfa, 0x1e, // Quantity
                                         0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, // Location: Event1
                                         0x0B, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, // VendorId: VendorEvent
                                         0x05, 0x00, 0x00, 0x00, // ChannelDataTypeId
                                         0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF // ChannelSecurityPolicy
                                         };
                    opaque_data        = {};
                    }
                };
            }
        };
    }

// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

PRINT Run SusUtilServerStep tests

LOAD_SUITE tsus_ssmutilsrv

START_TESTCASE 			DEVSRVS-SSMA-SUS-0002
//! @SYMTestCaseID 		DEVSRVS-SSMA-SUS-0002
//! @SYMPREQ 			PREQ1871
//! @SYMREQ			REQ9159
//! @SYMTestType		UT
//! @SYMTestPriority		Critical
//! @SYMTestStatus 		Implemented
//! @SYMTestCaseDesc		Unit-test for CSusUtilServer
//!				Unit-test for RSsmSusCli, testing "local" functionality in public methods
//!				Integration-test for RSsmSusCli and CSusUtilSession
//!				Integration-test for RSsmSusCli and CSusUtilSession
//!				Integration-test for TSsmSupInfo, RSsmSusCli, CSusUtilSession, CSusUtilServer, XSusPluginLoader and CSusPluginFrame
//! @SYMTestActions		doTestForMemoryLeaksL() The test will create a new instance of the server calling NewL on CSusUtilServer for the following cases:
//! 					1.When process is not ESystemCritical
//! 					2.Under OOM conditions.
//!				doTestUnconnected() The test will perform calls to the different methods of the RSsmSusCliclass in different scenarios.
//!					1.Call Connect() on a client with invalid SID
//!					2.Call Connect() on a client with valid SID we suppose a client with valid SID hereafter 
//!					3.Call Connect() twice
//!					4.Call Connect() from an unconnected session
//!					5.Call RequestLoadSup() and RequestLoadSupCancel() on an unconnected session.
//!				doTestPositiveConnectCloseL() 1.Create a process  get the SID of the process.
//!					2.Create a Separate thread for this process to start the server 
//!					3.Create a session with RSusClient and connect using the Connect call. 
//!					4.When the connection is established try to connect again with the same session Id 
//!					5.Kill the thread on which the server is active.
//!					6.Call the Session.Connect() call now.
//! 				doTestNegativeConnectCloseL() 1.Create a process  set the SID of the process to 1.
//!					2.Create a Separate thread for this process to start the server.
//!					3.Create a session with RSusClient and connect using the Connect call. 
//!					4.When the connection is established try to SendAnyRequest().
//!				doTestLoadSupL() The test will perform different operations to load Sup by means of a valid RSsmSusCli connection.
//!					The following scenarios are considered:
//!					1.Try Load missing SUP
//!					2.Try Load a SUP with incorrect type UID2
//!					3.Try Load a SUP with wrong Identity UID3
//!					4.Load a valid and working SUP. Ensure that its RunL gets called.
//!					5.Test that a second request to load the same Sup.
//!					6.Unload Sup
//!					7.Test that a second request to Unload the same Sup.
//! @SYMTestExpectedResults 	The test ends with the following results:
//! 					 1.No error is reported a new object is created and the process is set to ESystemCritical.
//! 					 2.Intermediate iterations finish with KErrNoMemory with successful one completing with KErrNone. Memory is not leaked in any iteration.
//!				1.KErrPermissionDenied
//!					2.KErrNone
//!					3.KErrAlreadyExists
//!					4.KErrNotFound
//!					5.In all cases it returns KErrDisconnected.
//!				1.After action 3 check whether the return value is KErrNone
//!					2.After Action 4 Check whether the return value is KErrAlreadyexists
//! 					3.After Action 6 Check whether the return value is KErrNotFound.
//! 				1.After action 3 check whether the return value is KErrNone
//!				        2.After Action 4 Check whether the return value is KErrPermDenied.
//!				1.KErrNotFound
//!					2.KErrNotSupported
//!					3.KErrBadName
//!					4.KErrNone
//!					5.KErrAlreadyExists
//!					6.KErrNone
//!					7.KErrNotFound
RUN_TEST_STEP 100 tsus_ssmutilsrv SusUtilServerStep
END_TESTCASE 			DEVSRVS-SSMA-SUS-0002


 
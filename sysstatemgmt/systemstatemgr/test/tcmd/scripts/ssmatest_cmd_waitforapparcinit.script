// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

PRINT Run WaitForApparcInit tests

LOAD_SUITE tcmd_server

START_TESTCASE 			DEVSRVS-SSMA-CMD-0020
//! @SYMTestCaseID 		DEVSRVS-SSMA-CMD-0020
//! @SYMPREQ 			PREQ1871
//! @SYMREQ				REQ9141 REQ9154
//! @SYMTestType			UT
//! @SYMTestPriority		Critical
//! @SYMTestStatus 			Implemented
//! @SYMTestCaseDesc		Ensure that all overloads of NewL implemented for CCmdWaitForApparcInit are working as expected if valid data is passed.
//! 				Ensure that all overloads of NewL implemented for CCmdWaitForApparcInit are working as expected if invalid data is passed.
//! 				Ensure that CCmdWaitForApparcInit::NewL(RReadStream& aReadStream) creates command with KErrNone if valid data is passed.
//!  					This NewL internally calls InternalizeL(RReadStream& aReadStream).
//!  				Ensure that CCmdWaitForApparcInit::NewL(RReadStream& aReadStream) leave with KErrArgument if invalid data is passed.
//!  					This NewL internally calls InternalizeL(RReadStream& aReadStream).		
//!  				Ensure that CCmdWaitForApparcInit::NewL(TSsmCommandParameters& aCommandParameters) creates command with KErrNone if valid data is passed.
//!  				Ensure that CCmdWaitForApparcInit::NewL(TSsmCommandParameters& aCommandParameters) leaves with 
//! 					KErrNotSupported if we pass invalid reader.
//! 				Ensure that CCmdWaitForApparcInit::NewL(TSsmCommandParameters& aCommandParameters) leaves with 
//! 					KErrArgument if we pass valid reader but invalid data.
//! 				Ensure that all overloads of NewL implemented for CCmdWaitForApparcInit returning type as ESsmCmdWaitForApparcInit if command created without any error.
//! 				It runs WaitForApparcInit command with severity ECmdIgnoreFailure.
//! 				It runs WaitForApparcInit command with severity ECmdHighSeverity.
//! 				It runs WaitForApparcInit command with severity ECmdIgnoreFailure.
//! 				It runs WaitForApparcInit command with severity ECmdHighSeverity.
//! @SYMTestActions			doTestNewLWithGoodDataL() Create CCmdWaitForApparcInit command using below overloads
//!  					CCmdWaitForApparcInit::NewL(RReadStream& aReadStream)
//!  					CCmdWaitForApparcInit::NewL(TCmdErrorSeverity aSeverity)
//!  					CCmdWaitForApparcInit::NewL(TSsmCommandParameters& aCommandParameters)
//!  				doTestNewLWithBadDataL() Create CCmdWaitForApparcInit command using below overloads
//! 				 	CCmdWaitForApparcInit::NewL(RReadStream& aReadStream)
//! 				 	CCmdWaitForApparcInit::NewL(TCmdErrorSeverity aSeverity)
//!  					CCmdWaitForApparcInit::NewL(TSsmCommandParameters& aCommandParameters)
//!  				doTestInternalizeLWithGoodDataL() Create CCmdWaitForApparcInit command using CCmdWaitForApparcInit::NewL(RReadStream& aReadStream) and pass valid data
//!  				doTestInternalizeLWithBadDataL() Create CCmdWaitForApparcInit command using CCmdWaitForApparcInit::NewL(RReadStream& aReadStream) and pass invalid data
//!  				doTestResourceReaderWithGoodDataL() Create CCmdWaitForApparcInit command using CCmdWaitForApparcInit::NewL(TSsmCommandParameters& aCommandParameters) and pass valid data
//!  				doTestResourceReaderWithMissingDataL() Create reader and read some data so that reader becomes invald. Now create CCmdWaitForApparcInit 
//! 					command using CCmdWaitForApparcInit::NewL(TSsmCommandParameters& aCommandParameters)
//! 				doTestResourceReaderWithBadDataL() Create a valid reader and create CCmdWaitForApparcInit command using CCmdWaitForApparcInit::NewL(TSsmCommandParameters& aCommandParameters)
//! 				doTestCommandTypeL() Create CCmdWaitForApparcInit command using below overloads
//! 					CCmdWaitForApparcInit::NewL(RReadStream& aReadStream)
//! 					CCmdWaitForApparcInit::NewL(TCmdErrorSeverity aSeverity)
//! 					CCmdWaitForApparcInit::NewL(TSsmCommandParameters& aCommandParameters) and check the type.
//! 				doTestCmdFailureIgnoreSeverityL() Create a command.
//! 					Add newly created command to the command list.
//! 					Execute the command list.
//! 				doTestCmdFailureHighSeverityL() Create a command.
//! 					Add newly created command to the command list.
//! 					Execute the command list.
//! 				doTestCancelCmdIgnoreSeverityL() Create a command.
//! 					Add newly created command to the command list.
//! 					Execute the command list.
//! 					Cancel the command list execution.
//! 				doTestCancelCmdHighSeverityL() Create a command.
//! 					Add newly created command to the command list.
//! 					Execute the command list.
//! 					Cancel the command list execution.				
//! @SYMTestExpectedResults 	All overloads should not leave, KErrNone is expected as leave code if NewL's are trapped.
//! 				All overloads should not leave, KErrArgument is expected as leave code if NewL's are trapped.
//! 				Test should return KErrNone.
//! 				Test should return KErrArgument.
//! 				Test should return KErrNone.
//! 				Test should return KErrNotSupported because command creation will not read the Type of command correctly.
//! 				Test should return KErrArgument.
//! 				All created objects should return ESsmCmdWaitForApparcInit as Type of the command.
//! 				Command list execution should always return KErrNone even if command fails.
//! 				Command list completion should finish with expectedErr.
//! 				Command list completion should finish with KErrCancel.
//! 				Command list completion should finish with KErrCancel.
RUN_TEST_STEP 100 tcmd_server CCmdTestWaitForApparcInit
END_TESTCASE 			DEVSRVS-SSMA-CMD-0020







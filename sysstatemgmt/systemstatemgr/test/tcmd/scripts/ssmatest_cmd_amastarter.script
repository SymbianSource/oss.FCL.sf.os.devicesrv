// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

PRINT Run AMA starter tests

LOAD_SUITE tcmd_server

START_TESTCASE 			DEVSRVS-SSMA-CMD-0002
//! @SYMTestCaseID 		DEVSRVS-SSMA-CMD-0002
//! @SYMPREQ 			PREQ1871
//! @SYMREQ			REQ9141 REQ9154
//! @SYMTestType		UT
//! @SYMTestPriority		Critical
//! @SYMTestStatus 		Implemented
//! @SYMTestCaseDesc		Ensure that all overloads of NewL implemented for CCmdAmaStarter are working as expected if valid data is passed.
//! 				Ensure that CCmdAmaStarter::NewL(TSsmCommandParameters& aCommandParameters) leaves with 
//! 					KErrArgument if we pass valid reader but invalid data.
//! 				Ensure that all overloads of NewL implemented for CCmdAmaStarter returning type as ESsmCmdAMAStarter if command created without any error.
//! 				It runs AMA starter command with different execution behaviours, i.e. 
//! 					ESsmWaitForSignal, ESsmFireAndForget and ESsmDeferredWaitForSignal, and severity is set to ECmdIgnoreFailure.
//! 				Create an AMA Starter command.
//! 					Add newly created command to the command list.
//! 					Execute the command list.
//! 				It runs AMA starter command with different execution behaviours, i.e. 
//! 					ESsmWaitForSignal, ESsmFireAndForget and ESsmDeferredWaitForSignal, and severity is set to ECmdHighSeverity.
//! 				It runs AMA starter command with different execution behaviours, i.e. 
//! 					ESsmWaitForSignal and ESsmDeferredWaitForSignal, and severity is set to ECmdIgnoreFailure.
//! 					Test will cancel the execution before command execution is completed.
//! 					We can not cancel any command if execution behaviour is FireAndForget.	
//! 				It runs AMA starter command with different execution behaviours, i.e. 
//! 					ESsmWaitForSignal, ESsmFireAndForget and ESsmDeferredWaitForSignal, and severity is set to ECmdHighSeverity.
//! 					Test will cancel the execution before command execution is completed.	
//! @SYMTestActions		doTestNewLWithGoodDataL() Create CCmdAmaStarter command using below overloads
//! 					CCmdAmaStarter::NewL(RReadStream& aReadStream)
//!  					CCmdAmaStarter::NewL(TCmdErrorSeverity aSeverity, TSsmExecutionBehaviour aExecutionBehaviour, const TUid aDscId)
//!  					CCmdAmaStarter::NewL(TSsmCommandParameters& aCommandParameters)
//! 				doTestNewLWithBadDataL() Create CCmdAmaStarter command using below overloads
//! 					CCmdAmaStarter::NewL(RReadStream& aReadStream)
//! 					CCmdAmaStarter::NewL(TCmdErrorSeverity aSeverity, TSsmExecutionBehaviour aExecutionBehaviour, const TUid aDscId)
//!  					CCmdAmaStarter::NewL(TSsmCommandParameters& aCommandParameters)
//! 				doTestInternalizeLWithGoodDataL() Create CCmdAmaStarter command using CCmdAmaStarter::NewL(RReadStream& aReadStream) and pass valid data
//! 				doTestInternalizeLWithBadDataL() Create CCmdAmaStarter command using CCmdAmaStarter::NewL(RReadStream& aReadStream) and pass invalid data
//! 				doTestResourceReaderWithGoodDataL() Ensure that CCmdAmaStarter::NewL(TSsmCommandParameters& aCommandParameters) creates command with KErrNone if valid data is passed.
//! 				doTestResourceReaderWithMissingDataL() Create reader and read some data so that reader becomes invald. Now create CCmdAmaStarter 
//! 					command using CCmdAmaStarter::NewL(TSsmCommandParameters& aCommandParameters)
//! 				doTestResourceReaderWithBadDataL() Create a valid reader and create CCmdAmaStarter command using CCmdAmaStarter::NewL(TSsmCommandParameters& aCommandParameters)
//! 				doTestCommandTypeL() Create CCmdAmaStarter command using below overloads
//! 				 	CCmdAmaStarter::NewL(RReadStream& aReadStream)
//! 				 	CCmdAmaStarter::NewL(TCmdErrorSeverity aSeverity, TSsmExecutionBehaviour aExecutionBehaviour, const TUid aDscId)
//! 				 	CCmdAmaStarter::NewL(TSsmCommandParameters& aCommandParameters) and check the type.
//! 				doTestCmdFailureIgnoreSeverityL() Create an AMA Starter command.
//! 					Add newly created command to the command list.
//! 					Execute the command list.
//! 				doTestCmdFailureHighSeverityL() Create an AMA Starter command.
//! 					Add newly created command to the command list.
//! 					Execute the command list.
//! 					Cancel the command list execution.
//! 				doTestCancelCmdIgnoreSeverityL() Create an AMA Starter command.
//! 					Add newly created command to the command list.
//! 					Execute the command list.
//! 					Cancel the command list execution.
//! 				doTestCancelCmdHighSeverityL()
//! @SYMTestExpectedResults 	All overloads should not leave, KErrNone is expected as leave code if NewL's are trapped.
//!				All overloads should not leave, KErrArgument is expected as leave code if NewL's are trapped.
//! 				Test should return KErrNone.
//! 				Test should return KErrArgument.
//! 				Test should return KErrNone.
//! 				Test should return KErrNotSupported because command creation will not read the Type of command correctly.
//! 				Test should return KErrArgument.
//! 				All created objects should return ESsmCmdAMAStarter as Type of the command.
//! 				Command list execution should always return KErrNone even if command fails.
//! 				Command list completion should finish with expectedErr.
//! 				Command list completion should finish with KErrCancel.
//! 				Command list completion should finish with KErrCancel.
RUN_TEST_STEP 100 tcmd_server CCmdTestAMAStarter
END_TESTCASE 			DEVSRVS-SSMA-CMD-0002



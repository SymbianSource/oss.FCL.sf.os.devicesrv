// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

PRINT Run SetPAndSKey tests

LOAD_SUITE tcmd_server

START_TESTCASE 			DEVSRVS-SSMA-CMD-0017
//! @SYMTestCaseID 		DEVSRVS-SSMA-CMD-0017
//!@SYMPREQ 			PREQ1871
//!@SYMREQ				REQ9141 REQ9154 REQ9139
//!@SYMTestType			UT
//!@SYMTestPriority		Critical
//!@SYMTestStatus 			Implemented
//!@SYMTestCaseDesc		Ensure that all overloads of NewL implemented for CCmdSetPAndSKey are working as expected if valid data is passed.
//!				Ensure that all overloads of NewL implemented for CCmdSetPAndSKey are working as expected if valid data is passed.
//!				Ensure that CCmdSetPAndSKey::NewL(RReadStream& aReadStream) creates command with KErrNone if valid data is passed.
//! 					This NewL internally calls InternalizeL(RReadStream& aReadStream).
//!				Ensure that CCmdSetPAndSKey::NewL(RReadStream& aReadStream) leave with KErrArgument if invalid data is passed.
//! 					This NewL internally calls InternalizeL(RReadStream& aReadStream).
//! 				Ensure that CCmdSetPAndSKey::NewL(TSsmCommandParameters& aCommandParameters) creates command with KErrNone if valid data is passed.
//! 				Ensure that CCmdSetPAndSKey::NewL(TSsmCommandParameters& aCommandParameters) leaves with 
//!					KErrNotSupported if we pass invalid reader.
//!				Ensure that CCmdSetPAndSKey::NewL(TSsmCommandParameters& aCommandParameters) leaves with 
//!					KErrArgument if we pass valid reader but invalid data.
//!				Ensure that all overloads of NewL implemented for CCmdSetPAndSKey returning type as ESsmCmdSetPAndSKey if command created without any error.
//!				It runs SetPAndSKey command and set severity to ECmdIgnoreFailure, and make the command fail.
//!				It runs SetPAndSKey command and set severity to ECmdHighSeverity, and make the command fail.
//!				It runs SetPAndSKey command and set severity to ECmdIgnoreFailure, and make the command fail.
//!					Test will cancel the execution before command execution is completed.
//!				It runs SetPAndSKey command and set severity to ECmdHighSeverity, and make the command fail.
//!					Test will cancel the execution before command execution is completed.				
//!@SYMTestActions			doTestNewLWithGoodDataL() Create CCmdSetPAndSKey command using below overloads
//! 					CCmdSetPAndSKey::NewL(RReadStream& aReadStream)
//! 					CCmdSetPAndSKey::NewL(TCmdErrorSeverity aSeverity, TUid aCategory, TUint aKey, TInt aValue)
//! 					CCmdSetPAndSKey::NewL(TSsmCommandParameters& aCommandParameters)
//! 				doTestNewLWithBadDataL() Create CCmdSetPAndSKey command using below overloads
//!				 	CCmdSetPAndSKey::NewL(RReadStream& aReadStream)
//!				 	CCmdSetPAndSKey::NewL(TCmdErrorSeverity aSeverity, TUid aCategory, TUint aKey, TInt aValue)
//! 					CCmdSetPAndSKey::NewL(TSsmCommandParameters& aCommandParameters)
//! 				doTestInternalizeLWithGoodDataL() Create CCmdSetPAndSKey command using CCmdSetPAndSKey::NewL(RReadStream& aReadStream) and pass valid data	
//! 				doTestInternalizeLWithBadDataL() Create CCmdSetPAndSKey command using CCmdSetPAndSKey::NewL(RReadStream& aReadStream) and pass invalid data
//! 				doTestResourceReaderWithGoodDataL() Create CCmdSetPAndSKey command using CCmdSetPAndSKey::NewL(TSsmCommandParameters& aCommandParameters) and pass valid data
//! 				doTestResourceReaderWithMissingDataL() Create reader and read some data so that reader becomes invald. Now create CCmdSetPAndSKey 
//!					command using CCmdSetPAndSKey::NewL(TSsmCommandParameters& aCommandParameters)
//!				doTestResourceReaderWithBadDataL() Create a valid reader and create CCmdSetPAndSKey command using CCmdSetPAndSKey::NewL(TSsmCommandParameters& aCommandParameters)
//!				doTestCommandTypeL() Create CCmdSetPAndSKey command using below overloads
//!				 	CCmdSetPAndSKey::NewL(RReadStream& aReadStream)
//!				 	CCmdSetPAndSKey::NewL(TCmdErrorSeverity aSeverity, TUid aCategory, TUint aKey, TInt aValue)
//!				 	CCmdSetPAndSKey::NewL(TSsmCommandParameters& aCommandParameters)
//! 					and check the type.
//! 				doTestCmdFailureIgnoreSeverityL() Create SetPAndSKey command.
//!					Add newly created command to the command list.
//!					Execute the command list.
//!				doTestCmdFailureHighSeverityL() Create SetPAndSKey command.
//!					Add newly created command to the command list.
//!					Execute the command list.
//!				doTestCancelCmdIgnoreSeverityL() Create SetPAndSKey command.
//!					Add newly created command to the command list.
//!					Execute the command list.
//!					Cancel the command list execution.
//!				doTestCancelCmdHighSeverityL() Create SetPAndSKey command.
//!					Add newly created command to the command list.
//!					Execute the command list.
//!					Cancel the command list execution. 					
//!@SYMTestExpectedResults 	All overloads should not leave, KErrNone is expected as leave code if NewL's are trapped.
//!				All overloads should not leave, KErrArgument is expected as leave code if NewL's are trapped.
//!				Test should return KErrNone.
//!				Test should return KErrArgument.
//!				Test should return KErrNone.
//!				Test should return KErrNotSupported because command creation will not read the Type of command correctly.
//!				Test should return KErrArgument.
//!				All created objects should return ESsmCmdSetPAndSKey as Type of the command.
//!				Command list execution should always return KErrNone even if command fails.
//!				Command list completion should finish with expectedErr.
//!				Command list completion should finish with KErrCancel.
//!				Command list completion should finish with KErrCancel.
RUN_TEST_STEP 100 tcmd_server CCmdTestSetPAndSKey
END_TESTCASE 			DEVSRVS-SSMA-CMD-0017




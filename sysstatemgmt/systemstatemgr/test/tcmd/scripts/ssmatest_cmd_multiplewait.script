// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

PRINT Run Multiplewait tests

LOAD_SUITE tcmd_server

START_TESTCASE 			DEVSRVS-SSMA-CMD-0010
//! @SYMTestCaseID 		DEVSRVS-SSMA-CMD-0010
//! @SYMPREQ 			PREQ1871
//! @SYMREQ			REQ9141 REQ9154
//! @SYMTestType		UT
//! @SYMTestPriority		Critical
//! @SYMTestStatus 		Implemented
//! @SYMTestCaseDesc		Ensure that all overloads of NewL implemented for CCmdMultipleWait are working as expected if valid data is passed.
//!				Ensure that all overloads of NewL implemented for CCmdMultipleWait are working as expected if invalid data is passed.
//!				Ensure that CCmdMultipleWait::NewL(RReadStream& aReadStream, TArray<MSsmCommand*>& aDeferredCommands) creates command with KErrNone if valid data is passed.
//! 					This NewL internally calls InternalizeL(RReadStream& aReadStream).
//!				Ensure that CCmdMultipleWait::NewL(RReadStream& aReadStream, TArray<MSsmCommand*>& aDeferredCommands) leave with KErrArgument if invalid data is passed.
//! 					This NewL internally calls InternalizeL(RReadStream& aReadStream).
//!				Ensure that CCmdMultipleWait::NewL(TSsmCommandParameters& aCommandParameters) creates command with KErrNone if valid data is passed.
//!				Ensure that CCmdMultipleWait::NewL(TSsmCommandParameters& aCommandParameters) leaves with 
//!					KErrNotSupported if we pass invalid reader.
//!				Ensure that CCmdMultipleWait::NewL(TSsmCommandParameters& aCommandParameters) leaves with 
//!					KErrArgument if we pass valid reader but invalid data.
//!				Ensure that all overloads of NewL implemented for CCmdMultipleWait returning type as ESsmCmdMultipleWait if command created without any error.
//! @SYMTestActions		doTestNewLWithGoodDataL() Create CCmdMultipleWait command using below overloads
//!  					CCmdMultipleWait::NewL(RReadStream& aReadStream, TArray<MSsmCommand*>& aDeferredCommands)
//!  					CCmdMultipleWait::NewL(TInt32 aTimeout)
//!  					CCmdMultipleWait::NewL(TSsmCommandParameters& aCommandParameters)
//!				doTestNewLWithBadDataL() Create CCmdMultipleWait command using below overloads
//!				 	CCmdMultipleWait::NewL(RReadStream& aReadStream, TArray<MSsmCommand*>& aDeferredCommands)
//!				 	CCmdMultipleWait::NewL(TInt32 aTimeout)
//! 					CCmdMultipleWait::NewL(TSsmCommandParameters& aCommandParameters)
//!				doTestInternalizeLWithGoodDataL() Create CCmdMultipleWait command using CCmdMultipleWait::NewL(RReadStream& aReadStream, TArray<MSsmCommand*>& aDeferredCommands) and pass valid data
//!				doTestInternalizeLWithBadDataL() Create CCmdMultipleWait command using CCmdMultipleWait::NewL(RReadStream& aReadStream, TArray<MSsmCommand*>& aDeferredCommands) and pass invalid data
//!				doTestResourceReaderWithGoodDataL() Create CCmdMultipleWait command using CCmdMultipleWait::NewL(TSsmCommandParameters& aCommandParameters) and pass valid data
//!				doTestResourceReaderWithMissingDataL() Create reader and read some data so that reader becomes invald. Now create CCmdMultipleWait 
//!					command using CCmdMultipleWait::NewL(TSsmCommandParameters& aCommandParameters)
//!				doTestResourceReaderWithBadDataL() Create a valid reader and create CCmdMultipleWait command using CCmdMultipleWait::NewL(TSsmCommandParameters& aCommandParameters)
//!				doTestCommandTypeL() Create CCmdMultipleWait command using below overloads
//!				  	CCmdMultipleWait::NewL(RReadStream& aReadStream, TArray<MSsmCommand*>& aDeferredCommands)
//!				 	CCmdMultipleWait::NewL(TInt32 aTimeout)
//!				 	CCmdMultipleWait::NewL(TSsmCommandParameters& aCommandParameters) and check the type.
//!				doTestCmdFailureIgnoreSeverityL() Create deferred commands with ECmdIgnoreFailure Severity
//!					Add this command to command list (This command should fail)
//!					Create a MultipleWait command
//!					Add this command to the command list.
//!					Execute the command list.
//!				doTestCmdFailureHighSeverityL() Create deferred commands with ECmdHighSeverity Severity
//!					Add this command to command list (This command should fail)
//!					Create a MultipleWait command
//!					Add this command to the command list.
//!					Execute the command list.
//!				doTestCancelCmdIgnoreSeverityL() Create deferred commands with ECmdIgnoreFailure Severity
//!					Add this command to command list (This command should fail)
//!					Create a MultipleWait command
//!					Add this command to the command list.
//!					Execute the command list.
//!				doTestCancelCmdHighSeverityL() Create deferred commands with ECmdHighSeverity Severity
//!					Add this command to command list (This command should fail)
//!					Create a MultipleWait command
//!					Add this command to the command list.
//!					Execute the command list.	
//! @SYMTestExpectedResults     All overloads should not leave, KErrNone is expected as leave code if NewL's are trapped.
//!				All overloads should not leave, KErrArgument is expected as leave code if NewL's are trapped.
//!				Test should return KErrNone.
//!				Test should return KErrArgument.
//!				Test should return KErrNone.
//!				Test should return KErrNotSupported because command creation will not read the Type of command correctly.
//!				Test should return KErrArgument.
//!				All created objects should return ESsmCmdMultipleWait as Type of the command.
//!				Test Should complete with KErrNone
//!				Test Should complete with error code returned by deferred command.	
//!				Test Should complete with KErrCancel
//!				Test Should complete with KErrCancel
//!				Test Should complete with KErrCancel
RUN_TEST_STEP 100 tcmd_server CCmdTestMultipleWait
END_TESTCASE 			DEVSRVS-SSMA-CMD-0010



// Copyright (c) 2007-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

PRINT Run SsmServerStep tests

LOAD_SUITE tssm_server

START_TESTCASE 			DEVSRVS-SSMA-SSM-0001
//! @SYMTestCaseID 		DEVSRVS-SSMA-SSM-0001
//! @SYMPREQ 			PREQ1871
//! @SYMREQ			REQ9116
//! @SYMTestCaseDesc		Check basic behaviour of SSM server class CSsmServer.
//! 				Check basic behaviour of SSM State Manager class RSsmStateManager.
//! 				Check that a swp plug-in can use multiple static command lists.
//! 				Check that a state plug-in can use multiple static command lists.
//! @SYMTestType		UT	
//! @SYMTestPriority		Critical
//! @SYMTestCaseDependencies	none
//! 				See tssm_swppolicy_simple.cpp file
//! 				See tssm_statepolicy_simple.cpp file
//! 				See tssm_statepolicy_fail.cpp file
//! @SYMTestActions		doSsmServerTestsL() The test will create a new instance of the SSM server, calling NewL on CSsmServer, for the following cases:
//! 					1.When process is not ESystemCritical
//! 					2.Under OOM conditions.
//! 				doTestConnectedSessionL() The test will perform calls to the different methods of the RSsmStateManager class in different scenarios. 
//! 					1.Call Connect() with invalid version 
//! 					2.Call Connect() with invalid server name
//! 					3.Call Connect() twice
//! 					4.Call Close() on a connected and non-connected client
//! 					5.Call XXXCancel() methods without having requested anything
//! 					6.Call RequestXXX() methods on the client.
//! 					7.Connect 2 different sessions with same server
//! 					8.Call RegisterSwpMapping() in different sessions with same key
//! 					9.Call multiple RequestSwpChange() in same session. In addition, check that cancellation of queued or running request works as expected
//! 					10.Call multiple RequestStateChange() in same session. In addition, check that cancellation of queued or running request works as expected, as well as transitions to fail.
//! 				doSwpHandlingTestsL() The test will define a swp plug-in dll which will prepare a different command list depending on the swp request made.
//! 					The test then will then request swp change in different scenarios.
//! 				doStateHandlingTestsL() The test will define a state plug-in dll which will prepare a different command list depending on the state request made.
//! 					The test then will then request state change in different scenarios.
//! @SYMTestExpectedResults 	The test ends with the following results:
//! 					1.No error is reported, a new object is created and the process is set to ESystemCritical.
//! 					2.No memory is not leaked in any iteration.
//! 				Following return values are expected:
//! 					1.KErrNotSupported 
//! 					2.KErrNotFound 
//! 					3.KErrNone, with second call returning KErrAlreadyExists.
//! 					4.If client was connected, it gets disconnected. No error is reported.
//! 					5.No action is taken. No error is reported.
//! 					6.KErrDisconnected
//! 					7.KErrNone for both sessions.
//! 					8.KErrAlreadyExists
//! 					9.All swp requests are completed or cancelled as expected
//! 					10.All state transitions requests are completed or cancelled as expected
//! 				The ssma ensures that the command list used for the policy plug-in is the correct one, according to the conditions given.
//! 				The ssma ensures that the command list used for the policy plug-in is the correct one, according to the conditions given.
RUN_TEST_STEP 100 tssm_server SsmServerStep
END_TESTCASE 			DEVSRVS-SSMA-SSM-0001







// Copyright (c) 2008-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

PRINT Run SsmStateFurtherTransitionStep tests

LOAD_SUITE tssm_server

START_TESTCASE 			DEVSRVS-SSMA-SSM-0018
//! @SYMTestCaseID 		DEVSRVS-SSMA-SSM-0018
//! @SYMDEF			DEF119568
//! @SYMPREQ 			PREQ1871
//! @SYMREQ			REQ9125
//! @SYMTestCaseDesc		Check GetNextState handles both sub-state and major transition requests
//! 				Check that the state transition requests from normal state to fail state or shutdown state 
//! 					with inadequate platsec capabilities are rejected.
//! @SYMTestType		CIT	
//! @SYMTestPriority		Critical
//! @SYMTestCaseDependencies	See tssm_statepolicy_simple.cpp file
//! 				See tssm_statepolicy_nextstatea.cpp file
//! 				See tssm_statepolicy_nextstateb.cpp file
//! 				See tssm_statepolicy_nextstatec.cpp file
//! @SYMTestActions		DoStateRequestTransition() The test will define three state plug-in dll which will just consist on one single command to publish the state
//! 					plus a CreateSwp in order to validate the correct flow of execution. The states are set such that the following flow is observed:
//! 					1.State A plugin dll will return a sub state transition in GetNextState() to A's sub state.
//! 					2.State A plugin dll will return a sub state transition in GetNextState() to B major state.
//! 					3.State B plugin dll will return a sub state transition in GetNextState() to B's sub state.
//! 					4.State B plugin dll will return a sub state transition in GetNextState() to C major state.
//! 					5.State C plugin dll will ends flow execution and does not return any new state transition.
//! 				DoStateRequestTransitionFromNormalState() 1. The test will create an test application with capability None.
//! 					2. The test application in turn checks that the normal state policy would reject the state transition 
//! 					requests to fail state and shutdown if the client who is requesting for the state transition does not have 
//! 					the powermgt capability.
//! @SYMTestExpectedResults 	SsmServer correctly handles the sub and major state transition as part of GetNextState(), and the states are loaded accordingly.
//! 				Test app should be killed with KErrNone
//!  				The system should be in normal state before creating the test app and after the test app is killed.
RUN_TEST_STEP 100 tssm_server SsmStateFurtherTransitionStep
END_TESTCASE 			DEVSRVS-SSMA-SSM-0018


